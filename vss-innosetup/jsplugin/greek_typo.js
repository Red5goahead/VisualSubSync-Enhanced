// Greek Typography Plug-in for VisualSubSync
// v1.1 (12/12/17)
// by "The Engineer"

var DebugMode = false;

VSSPlugin = {

  Name : 'Greek typography',
  Description : 'Check text against greek and general typography rules.\nv1.1 (12/12/17) by "The Engineer"',
  Color : 0x300001,
  Message : 'Πρόβλημα:',
  
  Rules : new Array(
  
	// [SETTINGS]
	// DISABLE CHECKS: You can disable any check by adding // at the start of the line. Caution: Always the last check must not have a comma at the end of the line!
	// CHANGE COLOR ERROR: Default: 0x300001, Red=0xFF0022, Pink=0xFF00BF, Blue=0x2600FF, Green=0x15FF00, Yellow=0xEAFF00, Orange=0xFF8000
  
	// General errors
	{ re : /[\t\v\f]+/mg, msg : "Περιέχει χαρακτήρα που δεν προτείνετε (π.χ. tab)! ΛΥΣΗ: Θα αντικατασταθεί με κενό", replaceby: " "},
	{ re : /^[ \u00A0\u2028\u2029]+/mg, msg : "Η πρόταση ξεκινάει με κενό! ΛΥΣΗ: Θα αφαιρεθεί το κενό", replaceby: ""},
	{ re : /[ \u00A0\u2028\u2029]+$/mg, msg : "Η πρόταση τελειώνει με κενό! ΛΥΣΗ: Θα αφαιρεθεί το κενό", replaceby: ""},
	{ re : /[ \u00A0\u2028\u2029]{2,}/mg, msg : "Υπάρχουν πολλαπλά κενά! ΛΥΣΗ: Θα γίνουν μονά τα κενά", replaceby: " "},
	{ re : /\.{3}\b/mg, msg : "Δεν υπάρχει κενό μετά από αποσιωπητικά! ΛΥΣΗ: Θα προστεθεί κενό", replaceby: '… '},
	{ re : /\…(\b)/mg, msg : "Δεν υπάρχει κενό μετά από αποσιωπητικά! ΛΥΣΗ: Θα προστεθεί κενό", replaceby: '… $1'},
	{ re : /([ΕΡΤΥΘΙΟΠΑΣΔΦΓΗΞΚΛΖΧΨΩΒΝΜΈΎΊΌΆΉΏερτυθιοπασδφγηξκλζχψωβνμέύίόάήώς"'])\.{3}([ΕΡΤΥΘΙΟΠΑΣΔΦΓΗΞΚΛΖΧΨΩΒΝΜΈΎΊΌΆΉΏερτυθιοπασδφγηξκλζχψωβνμέύίόάήώς"'])/mg, msg : "Δεν υπάρχει κενό μετά από αποσιωπητικά! ΛΥΣΗ: Θα προστεθεί κενό", replaceby: '$1… $2'}, // for greek characters (for boundary "\b").
	{ re : /([ΕΡΤΥΘΙΟΠΑΣΔΦΓΗΞΚΛΖΧΨΩΒΝΜΈΎΊΌΆΉΏερτυθιοπασδφγηξκλζχψωβνμέύίόάήώς"'])\…([ΕΡΤΥΘΙΟΠΑΣΔΦΓΗΞΚΛΖΧΨΩΒΝΜΈΎΊΌΆΉΏερτυθιοπασδφγηξκλζχψωβνμέύίόάήώς"'])/mg, msg : "Δεν υπάρχει κενό μετά από αποσιωπητικά! ΛΥΣΗ: Θα προστεθεί κενό", replaceby: '$1… $2'}, // for greek characters (for boundary "\b").
	{ re : /([^-])\s+([.,:!])/mg, msg : "Υπάρχει κενό πριν από σημείο στίξης! ΛΥΣΗ: Θα αφαιρεθούν τα περιττά κενά", replaceby: "$1$2"},
	{ re : /([:!])\b/mg, msg : "Δεν υπάρχει κενό μετά από σημείο στίξης! ΛΥΣΗ: Θα προστεθεί κενό", replaceby: "$1 "},
	{ re : /([ΕΡΤΥΘΙΟΠΑΣΔΦΓΗΞΚΛΖΧΨΩΒΝΜΈΎΊΌΆΉΏερτυθιοπασδφγηξκλζχψωβνμέύίόάήώς"'])([:!])([ΕΡΤΥΘΙΟΠΑΣΔΦΓΗΞΚΛΖΧΨΩΒΝΜΈΎΊΌΆΉΏερτυθιοπασδφγηξκλζχψωβνμέύίόάήώς"'])/mg, msg : "Δεν υπάρχει κενό μετά από σημείο στίξης! ΛΥΣΗ: Θα προστεθεί κενό", replaceby: "$1$2 $3"}, // for greek characters (for boundary "\b").
	{ re : /^-(\S)/mg, msg : "Δεν υπάρχει κενό πριν από παύλα διαλόγου! ΛΥΣΗ: Θα προστεθεί κενό μετά την παύλα.", replaceby: "- $1"},
	{ re : /''/mg, msg : "Τα εισαγωγικά έχουν δοθεί λανθασμένα! ΛΥΣΗ: Θα αντικατασταθούν με τα σωστά", replaceby: "\""},
	{ re : /([‘’])/mg, msg : "Τα εισαγωγικά έχουν δοθεί λανθασμένα! ΛΥΣΗ: Θα αντικατασταθούν με τα σωστά", replaceby: "\""},
	{ re : /"(\w+)"(\w)/mg, msg : "Δεν υπάρχει κενό μετά από τα εισαγωγικά! ΛΥΣΗ: Θα προστεθεί κενό", replaceby: "\"$1\" $2"},
	{ re : /"([ΕΡΤΥΘΙΟΠΑΣΔΦΓΗΞΚΛΖΧΨΩΒΝΜΈΎΊΌΆΉΏερτυθιοπασδφγηξκλζχψωβνμέύίόάήώς]+)"([ΕΡΤΥΘΙΟΠΑΣΔΦΓΗΞΚΛΖΧΨΩΒΝΜΈΎΊΌΆΉΏερτυθιοπασδφγηξκλζχψωβνμέύίόάήώς])/mg, msg : "Δεν υπάρχει κενό μετά από τα εισαγωγικά! ΛΥΣΗ: Θα προστεθεί κενό", replaceby: "\"$1\" $2"}, // for greek characters (for alphanumeric "\w").
	{ re : /(\w)"(\w+)"/mg, msg : "Δεν υπάρχει κενό πριν από τα εισαγωγικά! ΛΥΣΗ: Θα προστεθεί κενό", replaceby: "$1 \"$2\""},
	{ re : /([ΕΡΤΥΘΙΟΠΑΣΔΦΓΗΞΚΛΖΧΨΩΒΝΜΈΎΊΌΆΉΏερτυθιοπασδφγηξκλζχψωβνμέύίόάήώς])"([ΕΡΤΥΘΙΟΠΑΣΔΦΓΗΞΚΛΖΧΨΩΒΝΜΈΎΊΌΆΉΏερτυθιοπασδφγηξκλζχψωβνμέύίόάήώς]+)"/mg, msg : "Δεν υπάρχει κενό πριν από τα εισαγωγικά! ΛΥΣΗ: Θα προστεθεί κενό", replaceby: "$1 \"$2\""}, // for greek characters (for alphanumeric "\w").
	{ re : /^\.\.([^.])/mg, msg : "Έχουν δοθεί δύο τελείες αντί για τρεις για αποσιωπητικά στην αρχή της πρότασης! ΛΥΣΗ: Θα αντικατασταθούν με τρεις τελείες", replaceby: "…$1"},
	{ re : /([^.])\.\.$/mg, msg : "Έχουν δοθεί δύο τελείες αντί για τρεις για αποσιωπητικά στο τέλος της πρότασης! ΛΥΣΗ: Θα αντικατασταθούν με τρεις τελείες", replaceby: "$1…"},
	{ re : /([^.])\.\.([^.])/mg, msg : "Έχουν δοθεί δύο τελείες αντί για τρεις για αποσιωπητικά ενδιάμεσα σε λέξεις! ΛΥΣΗ: Θα αντικατασταθούν με τρεις τελείες", replaceby: "$1…$2"},
	{ re : /\.{4,}/mg, msg : "Έχουν δοθεί παραπάνω από τρεις τελείες για αποσιωπητικά! ΛΥΣΗ: Θα μειωθούν σε τρεις τελείες", replaceby: '…'},
	//{ re : /(…)/mg, msg : "Τα αποσιωπητικά έχουν δοθεί με τριπλή τελεία (ένας χαρακτήρας)! ΛΥΣΗ: Θα αντικατασταθούν με τρεις τελείες", replaceby: "..."},
	{ re : /\.\.\./mg, msg : "Τα αποσιωπητικά έχουν δοθεί ως τρεις τελείες! ΛΥΣΗ: Θα αντικατασταθούν με την τριπλή τελεία (ένας χαρακτήρας)", replaceby: "…"},
	{ re : /^$/, msg : "Κενός υπότιτλος! ΛΥΣΗ: Χειροκίνητη διόρθωση"},
	{ re : /(\b[a-z]+)([A-Z])/mg, msg : "Κεφαλαίο γράμμα ενδιάμεσα σε λέξη! ΛΥΣΗ: Χειροκίνητη διόρθωση"},
	{ re : /([,]){2,}/mg, msg : "Πολλαπλά συνεχόμενα σημεία στίξεως (κόμμα)! ΛΥΣΗ: Θα αφαιρεθούν τα περιττά", replaceby: '$1'},
	{ re : /([:]){2,}/mg, msg : "Πολλαπλά συνεχόμενα σημεία στίξεως (άνω κάτω τελεία)! ΛΥΣΗ: Θα αφαιρεθούν τα περιττά", replaceby: '$1'},
	{ re : /([!]){2,}/mg, msg : "Πολλαπλά συνεχόμενα σημεία στίξεως (θαυμαστικό)! ΛΥΣΗ: Θα αφαιρεθούν τα περιττά", replaceby: '$1'},
	{ re : /(["]){2,}/mg, msg : "Πολλαπλά συνεχόμενα σημεία στίξεως (εισαγωγικά)! ΛΥΣΗ: Θα αφαιρεθούν τα περιττά", replaceby: '$1'},
	{ re : /([']){3,}/mg, msg : "Πολλαπλοί συνεχόμενοι απόστροφοι! ΛΥΣΗ: Θα αφαιρεθούν τα περιττά", replaceby: '$1'},
	{ re : /[,!@*\(-]\.\.\./mg, msg : "Χαρακτήρας που δεν προτείνεται μαζί με αποσιωπητικά! ΛΥΣΗ: Θα αφαιρεθεί ο χαρακτήρας πριν τις τρεις τελείες", replaceby: "…"},
	{ re : /[,!@*\(-]\…/mg, msg : "Χαρακτήρας που δεν προτείνεται μαζί με αποσιωπητικά! ΛΥΣΗ: Θα αφαιρεθεί ο χαρακτήρας πριν τις τρεις τελείες", replaceby: "…"},

	// Greek errors
	{ re : /(\s[ερτυθιοπασδφγηξκλζχψωβνμέύίόάήώς]+)([ΕΡΤΥΘΙΟΠΑΣΔΦΓΗΞΚΛΖΧΨΩΒΝΜΈΎΊΌΆΉΏ])/mg, msg : "Κεφαλαίο γράμμα ενδιάμεσα σε λέξη! ΛΥΣΗ: Χειροκίνητη διόρθωση"},
	{ re : /[ΕΡΤΥΘΙΟΠΑΣΔΦΓΗΞΚΛΖΧΨΩΒΝΜΈΎΊΌΆΉΏ]{2,}[ερτυθιοπασδφγηξκλζχψωβνμέύίόάήώς]{2,}/mg, msg : "Υπάρχουν περιττά κεφαλαία γράμματα! ΛΥΣΗ: Χειροκίνητη διόρθωση"},
	{ re : /[?]+/mg, msg : "Λατινικό ερωτηματικό! ΛΥΣΗ: Θα αντικατασταθεί με ελληνικό", replaceby: ";"},
	{ re : /([όοΌΟ],)\s(τι)([\s])/mg, msg : "Στο 'ό, τι' υπάρχει κενό! ΛΥΣΗ: Θα αφαιρεθεί το κενό", replaceby: "$1$2$3"},
	{ re : /([\s])οτι([\s.,!])/mg, msg : "Δεν υπάρχει τόνος στο 'ότι'! ΛΥΣΗ: Θα προστεθεί τόνος", replaceby: "$1ότι$2"},
	{ re : /^-\s[qwertyuiopasdfghjklzxcvbnmερτυθιοπασδφγηξκλζχψωβνμέύίόάήώς]/g, msg : "Ο διάλογος ξεκινάει με πεζό γράμμα αντί για κεφαλαίο! ΛΥΣΗ: Χειροκίνητη διόρθωση"},
	{ re : /^[qwertyuiopasdfghjklzxcvbnmερτυθιοπασδφγηξκλζχψωβνμέύίόάήώς]/g, msg : "Η πρόταση ξεκινάει με πεζό γράμμα αντί για κεφαλαίο! ΛΥΣΗ: Χειροκίνητη διόρθωση"},
	{ re : /[qwertyuiopasdfghjklzxcvbnmςερτυθιοπασδφγηξκλζχψωβνμάέύίόάήώς"'-\(\)]$/g, msg : "Λείπει στίξη στο τέλος της πρότασης! ΛΥΣΗ: Χειροκίνητη διόρθωση" },
	{ re : /(\w)'(\w)/mg, msg : "Δεν υπάρχει κενό μετά ή πριν από απόστροφο! ΛΥΣΗ: Θα προστεθεί κενό πριν από την απόστροφο", replaceby: "$1 '$2"},
	{ re : /([ΕΡΤΥΘΙΟΠΑΣΔΦΓΗΞΚΛΖΧΨΩΒΝΜΈΎΊΌΆΉΏερτυθιοπασδφγηξκλζχψωβνμέύίόάήώς])'([ΕΡΤΥΘΙΟΠΑΣΔΦΓΗΞΚΛΖΧΨΩΒΝΜΈΎΊΌΆΉΏερτυθιοπασδφγηξκλζχψωβνμέύίόάήώς])/mg, msg : "Δεν υπάρχει κενό μετά ή πριν από απόστροφο! ΛΥΣΗ: Θα προστεθεί κενό πριν από την απόστροφο", replaceby: "$1 '$2"}, // for greek characters (for alphanumeric "\w").
	{ re : /([,])\b/mg, msg : "Δεν υπάρχει κενό μετά από κόμμα! ΛΥΣΗ: Θα προστεθεί κενό", replaceby: "$1 "},
	{ re : /((?![\s".][όο])([ΕΡΤΥΘΙΟΠΑΣΔΦΓΗΞΚΛΖΧΨΩΒΝΜΈΎΊΌΆΉΏερτυθιοπασδφγηξκλζχψωβνμέύίόάήώς"'])([,])(?!τι[\s".])(?!τιδήποτε[\s".])([ΕΡΤΥΘΙΟΠΑΣΔΦΓΗΞΚΛΖΧΨΩΒΝΜΈΎΊΌΆΉΏερτυθιοπασδφγηξκλζχψωβνμέύίόάήώς"']))/mg, msg : "Δεν υπάρχει κενό μετά από κόμμα! ΛΥΣΗ: Θα προστεθεί κενό", replaceby: "$2$3 $4"}, // for greek characters (for boundary "\b").
	{ re : /(?![\s.QWERTYUIOPASDFGHJKLZXCVBNM][QWERTYUIOPASDFGHJKLZXCVBNM])(\w)([.])(?![QWERTYUIOPASDFGHJKLZXCVBNM][\s.QWERTYUIOPASDFGHJKLZXCVBNM])(\w)/mg, msg : "Δεν υπάρχει κενό μετά από τελεία! ΛΥΣΗ: Θα προστεθεί κενό", replaceby: "$1$2 $3"},
	{ re : /(?![\s.ΕΡΤΥΘΙΟΠΑΣΔΦΓΗΞΚΛΖΧΨΩΒΝΜ][ΕΡΤΥΘΙΟΠΑΣΔΦΓΗΞΚΛΖΧΨΩΒΝΜ])(["ΕΡΤΥΘΙΟΠΑΣΔΦΓΗΞΚΛΖΧΨΩΒΝΜΌΆΉΏερτυθιοπασδφγηξκλζχψωβνμέύίόάήώς])([.])(?![ΕΡΤΥΘΙΟΠΑΣΔΦΓΗΞΚΛΖΧΨΩΒΝΜ][\s.ΕΡΤΥΘΙΟΠΑΣΔΦΓΗΞΚΛΖΧΨΩΒΝΜ])([\"ΕΡΤΥΘΙΟΠΑΣΔΦΓΗΞΚΛΖΧΨΩΒΝΜΌΆΉΏερτυθιοπασδφγηξκλζχψωβνμέύίόάήώς])/mg, msg : "Δεν υπάρχει κενό μετά από τελεία! ΛΥΣΗ: Θα προστεθεί κενό", replaceby: "$1$2 $3"}, // for greek characters (for boundary "\b").
	
	// Common Greek misspelling words errors
	{ re : /([\s"])γιαυτό([\s.,!"])/mg, msg : "Λανθασμένα η λέξη 'γιαυτό'! ΛΥΣΗ: Θα αντικατασταθεί με 'γι' αυτό'", replaceby: "$1γι' αυτό$2"},
	{ re : /([\s"])απ' ότι([\s.,!"])/mg, msg : "Λανθασμένα η λέξη 'απ' ότι'! ΛΥΣΗ: Θα αντικατασταθεί με 'απ' ό,τι'", replaceby: "$1απ' ό,τι$2"},
	{ re : /([\s"])απτό([\s.,!"])/mg, msg : "Λανθασμένα η λέξη 'απτό'! ΛΥΣΗ: Θα αντικατασταθεί με 'απ' το'", replaceby: "$1απ' το$2"},
	{ re : /([\s"])απτά([\s.,!"])/mg, msg : "Λανθασμένα η λέξη 'απτά'! ΛΥΣΗ: Θα αντικατασταθεί με 'απ' τά'", replaceby: "$1απ' τά$2"},
	{ re : /([\s"])ο,τιδήποτε([\s.,!"])/mg, msg : "Λανθασμένα η λέξη 'ο,τιδήποτε'! ΛΥΣΗ: Θα αντικατασταθεί με 'οτιδήποτε'", replaceby: "$1οτιδήποτε$2"},
	{ re : /([\s"])κάθε ένας([\s.,!"])/mg, msg : "Λανθασμένα η λέξη 'κάθε ένας'! ΛΥΣΗ: Θα αντικατασταθεί με 'καθένας'", replaceby: "$1καθένας$2"},
	{ re : /([\s"])κάθε μια([\s.,!"])/mg, msg : "Λανθασμένα η λέξη 'κάθε μια'! ΛΥΣΗ: Θα αντικατασταθεί με 'καθεμιά'", replaceby: "$1καθεμιά$2"},
	{ re : /([\s"])άνηκε([\s.,!"])/mg, msg : "Λανθασμένα η λέξη 'άνηκε'! ΛΥΣΗ: Θα αντικατασταθεί με 'ανήκε'", replaceby: "$1ανήκε$2"}
	
  ),
  
  HasError : function(CurrentSub, PreviousSub, NextSub) {
	  
    var SubText = CurrentSub.Text;
	
    for (var i = 0; i < this.Rules.length; i++) {
		
      if (this.Rules[i].re.test(SubText)) {
		  
        // Reset
        this.Rules[i].re.lastIndex = 0;
		
        // Debug
        if (DebugMode && this.Rules[i].replaceby !== undefined) {
			
          ScriptLog(SubText.replace(this.Rules[i].re, this.Rules[i].replaceby));
          ScriptLog('');
        }
		
        return (this.Rules[i].exception) ? '' : this.Rules[i].msg;
      }
    }
    return '';
  },
  
  FixError : function(CurrentSub, PreviousSub, NextSub) {
	  
    var SubText = CurrentSub.Text;
	
    for (var i = 0; i < this.Rules.length; i++) {
		
      if ((this.Rules[i].replaceby !== undefined) && (this.Rules[i].re.test(SubText))) {
		  
        if (this.Rules[i].exception !== true) {
			
          CurrentSub.Text = SubText.replace(this.Rules[i].re, this.Rules[i].replaceby);
        }
		
        // Reset
        this.Rules[i].re.lastIndex = 0;
		
        return;
      }
    }
  }
};